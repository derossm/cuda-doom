
//SDL_SCANCODE_A = 4, // These values are from usage page 0x07 (USB keyboard page).
//SDL_SCANCODE_BACKSLASH = 49,	// Located at the lower left of the return key on ISO keyboards and at the right end of the QWERTY row on
								// ANSI keyboards. Produces REVERSE SOLIDUS (backslash) and VERTICAL LINE in a US layout, REVERSE SOLIDUS
								// and VERTICAL LINE in a UK Mac layout, NUMBER SIGN and TILDE in a UK Windows layout, DOLLAR SIGN and
								// POUND SIGN in a Swiss German layout, NUMBER SIGN and APOSTROPHE in a German layout, GRAVE ACCENT and
								// POUND SIGN in a French Mac layout, and ASTERISK and MICRO SIGN in a French Windows layout.

//SDL_SCANCODE_NONUSHASH = 50,	// ISO USB keyboards actually use this code instead of 49 for the same key, but all OSes I've seen treat the
								// two codes identically. So, as an implementor, unless your keyboard generates both of those codes and your
								// OS treats them differently, you should generate SDL_SCANCODE_BACKSLASH instead of this code. As a user,
								// you should not rely on this code because SDL will never generate it with most (all?) keyboards.

//SDL_SCANCODE_GRAVE = 53,		// Located in the top left corner (on both ANSI and ISO keyboards). Produces GRAVE ACCENT and TILDE in a
								// US Windows layout and in US and UK Mac layouts on ANSI keyboards, GRAVE ACCENT and NOT SIGN in a
								// UK Windows layout, SECTION SIGN and PLUS-MINUS SIGN in US and UK Mac layouts on ISO keyboards,
								// SECTION SIGN and DEGREE SIGN in a Swiss German layout (Mac: only on ISO keyboards), CIRCUMFLEX ACCENT
								// and DEGREE SIGN in a German layout (Mac: only on ISO keyboards), SUPERSCRIPT TWO and TILDE in a
								// French Windows layout, COMMERCIAL AT and NUMBER SIGN in a French Mac layout on ISO keyboards, and
								// LESS-THAN SIGN and GREATER-THAN SIGN in a Swiss German, German, or French Mac layout on ANSI keyboards.
//SDL_SCANCODE_NONUSBACKSLASH = 100,	// This is the additional key that ISO keyboards have over ANSI ones, located between left shift and Y.
										// Produces GRAVE ACCENT and TILDE in a US or UK Mac layout, REVERSE SOLIDUS (backslash) and VERTICAL LINE in a
										// US or UK Windows layout, and LESS-THAN SIGN and GREATER-THAN SIGN in a Swiss German, German, or French layout.
//SDL_SCANCODE_INSERT = 73, // insert on PC, help on some Mac keyboards (but does send code 73, not 117)
//SDL_SCANCODE_NUMLOCKCLEAR = 83, // num lock on PC, clear on Mac keyboards
//SDL_SCANCODE_APPLICATION = 101, // windows contextual menu, compose
//SDL_SCANCODE_POWER = 102, // The USB document says this is a status flag, not a physical key - but some Mac keyboards do have a power key.
//SDL_SCANCODE_AGAIN = 121, // redo
//SDL_SCANCODE_LOCKINGCAPSLOCK = 130, // not sure whether there's a reason to enable these
//SDL_SCANCODE_LOCKINGNUMLOCK = 131, //
//SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, //
//SDL_SCANCODE_INTERNATIONAL1 = 135, // used on Asian keyboards, see footnotes in USB doc
//SDL_SCANCODE_INTERNATIONAL3 = 137, // Yen	SDL_SCANCODE_LANG1 = 144,// Hangul/English toggle
//SDL_SCANCODE_LANG2 = 145, // Hanja conversion
//SDL_SCANCODE_LANG3 = 146, // Katakana
//SDL_SCANCODE_LANG4 = 147, // Hiragana
//SDL_SCANCODE_LANG5 = 148, // Zenkaku/Hankaku
//SDL_SCANCODE_LANG6 = 149, // reserved
//SDL_SCANCODE_LANG7 = 150, // reserved
//SDL_SCANCODE_LANG8 = 151, // reserved
//SDL_SCANCODE_LANG9 = 152, // reserved
//SDL_SCANCODE_ALTERASE = 153, // Erase-Eaze
//SDL_SCANCODE_LALT = 226, // alt, option
//SDL_SCANCODE_LGUI = 227, // windows, command (apple), meta
//SDL_SCANCODE_RCTRL = 228,
//SDL_SCANCODE_RSHIFT = 229,
//SDL_SCANCODE_RALT = 230, // alt gr, option
//SDL_SCANCODE_RGUI = 231, // windows, command (apple), meta
//SDL_SCANCODE_MODE = 257,	// I'm not sure if this is really not covered by any of the above,
							// but since there's a special KMOD_MODE for it I'm adding it here
//SDL_SCANCODE_MODE = 257, // Usage page 0x07
//SDL_SCANCODE_AUDIONEXT = 258, // These values are mapped from usage page 0x0C (USB consumer page).
//SDL_SCANCODE_BRIGHTNESSDOWN = 275, // Usage page 0x0C
//SDL_SCANCODE_DISPLAYSWITCH = 277, // display mirroring/dual display switch, video mode switch
//SDL_SCANCODE_APP2 = 284, // These values are mapped from usage page 0x0C (USB consumer page).
//SDL_SCANCODE_AUDIOFASTFORWARD = 286, // Usage page 0x0C (additional media keys)
//SDL_NUM_SCANCODES = 512 // not a key, just marks the number of scancodes for array bounds
/*
struct Keys
{
	uint16_t KEY_RIGHTARROW{0xae};
	uint16_t KEY_LEFTARROW{0xac};
	uint16_t KEY_UPARROW{0xad};
	uint16_t KEY_DOWNARROW{0xaf};
	uint16_t KEY_ESCAPE{27};
	uint16_t KEY_ENTER{13};
	uint16_t KEY_TAB{9};
	uint16_t KEY_F1{(0x80 + 0x3b)};
	uint16_t KEY_F2{(0x80 + 0x3c)};
	uint16_t KEY_F3{(0x80 + 0x3d)};
	uint16_t KEY_F4{(0x80 + 0x3e)};
	uint16_t KEY_F5{(0x80 + 0x3f)};
	uint16_t KEY_F6{(0x80 + 0x40)};
	uint16_t KEY_F7{(0x80 + 0x41)};
	uint16_t KEY_F8{(0x80 + 0x42)};
	uint16_t KEY_F9{(0x80 + 0x43)};
	uint16_t KEY_F10{(0x80 + 0x44)};
	uint16_t KEY_F11{(0x80 + 0x57)};
	uint16_t KEY_F12{(0x80 + 0x58)};
	uint16_t KEY_BACKSPACE{0x7f};
	uint16_t KEY_PAUSE{0xff};
	uint16_t KEY_EQUALS{0x3d};
	uint16_t KEY_MINUS{0x2d};
	uint16_t KEY_RSHIFT{(0x80 + 0x36)};
	uint16_t KEY_RCTRL{(0x80 + 0x1d)};
	uint16_t KEY_RALT{(0x80 + 0x38)};
	uint16_t KEY_LALT{KEY_RALT};
	uint16_t KEY_CAPSLOCK{(0x80 + 0x3a)};
	uint16_t KEY_NUMLOCK{(0x80 + 0x45)};
	uint16_t KEY_SCRLCK{(0x80 + 0x46)};
	uint16_t KEY_PRTSCR{(0x80 + 0x59)};
	uint16_t KEY_HOME{(0x80 + 0x47)};
	uint16_t KEY_END{(0x80 + 0x4f)};
	uint16_t KEY_PGUP{(0x80 + 0x49)};
	uint16_t KEY_PGDN{(0x80 + 0x51)};
	uint16_t KEY_INS{(0x80 + 0x52)};
	uint16_t KEY_DEL{(0x80 + 0x53)};
	uint16_t KEYP_0{KEY_INS};
	uint16_t KEYP_1{KEY_END};
	uint16_t KEYP_2{KEY_DOWNARROW};
	uint16_t KEYP_3{KEY_PGDN};
	uint16_t KEYP_4{KEY_LEFTARROW};
	uint16_t KEYP_5{(0x80 + 0x4c)};
	uint16_t KEYP_6{KEY_RIGHTARROW};
	uint16_t KEYP_7{KEY_HOME};
	uint16_t KEYP_8{KEY_UPARROW};
	uint16_t KEYP_9{KEY_PGUP};
	uint16_t KEYP_DIVIDE{'/'};
	uint16_t KEYP_PLUS{'+'};
	uint16_t KEYP_MINUS{'-'};
	uint16_t KEYP_MULTIPLY{'*'};
	uint16_t KEYP_PERIOD{0};
	uint16_t KEYP_EQUALS{KEY_EQUALS};
	uint16_t KEYP_ENTER{KEY_ENTER};
	uint16_t KEY_A{'a'};
	uint16_t KEY_B{'b'};
	uint16_t KEY_C{'c'};
	uint16_t KEY_D{'d'};
	uint16_t KEY_E{'e'};
	uint16_t KEY_F{'f'};
	uint16_t KEY_G{'g'};
	uint16_t KEY_H{'h'};
	uint16_t KEY_I{'i'};
	uint16_t KEY_J{'j'};
	uint16_t KEY_K{'k'};
	uint16_t KEY_L{'l'};
	uint16_t KEY_M{'m'};
	uint16_t KEY_N{'n'};
	uint16_t KEY_O{'o'};
	uint16_t KEY_P{'p'};
	uint16_t KEY_Q{'q'};
	uint16_t KEY_R{'r'};
	uint16_t KEY_S{'s'};
	uint16_t KEY_T{'t'};
	uint16_t KEY_U{'u'};
	uint16_t KEY_V{'v'};
	uint16_t KEY_W{'w'};
	uint16_t KEY_X{'x'};
	uint16_t KEY_Y{'y'};
	uint16_t KEY_Z{'z'};
};

enum Keys{
	KEY_RIGHTARROW = 0xae,
	KEY_LEFTARROW = 0xac,
	KEY_UPARROW = 0xad,
	KEY_DOWNARROW = 0xaf,
	KEY_ESCAPE = 27,
	KEY_ENTER = 13,
	KEY_TAB = 9,
	KEY_F1 = (0x80 + 0x3b),
	KEY_F2 = (0x80 + 0x3c),
	KEY_F3 = (0x80 + 0x3d),
	KEY_F4 = (0x80 + 0x3e),
	KEY_F5 = (0x80 + 0x3f),
	KEY_F6 = (0x80 + 0x40),
	KEY_F7 = (0x80 + 0x41),
	KEY_F8 = (0x80 + 0x42),
	KEY_F9 = (0x80 + 0x43),
	KEY_F10 = (0x80 + 0x44),
	KEY_F11 = (0x80 + 0x57),
	KEY_F12 = (0x80 + 0x58),
	KEY_BACKSPACE = 0x7f,
	KEY_PAUSE = 0xff,
	KEY_EQUALS = 0x3d,
	KEY_MINUS = 0x2d,
	KEY_RSHIFT = (0x80 + 0x36),
	KEY_RCTRL = (0x80 + 0x1d),
	KEY_RALT = (0x80 + 0x38),
	KEY_LALT = KEY_RALT,
	KEY_CAPSLOCK = (0x80 + 0x3a),
	KEY_NUMLOCK = (0x80 + 0x45),
	KEY_SCRLCK = (0x80 + 0x46),
	KEY_PRTSCR = (0x80 + 0x59),
	KEY_HOME = (0x80 + 0x47),
	KEY_END = (0x80 + 0x4f),
	KEY_PGUP = (0x80 + 0x49),
	KEY_PGDN = (0x80 + 0x51),
	KEY_INS = (0x80 + 0x52),
	KEY_DEL = (0x80 + 0x53),
	KEYP_0 = KEY_INS,
	KEYP_1 = KEY_END,
	KEYP_2 = KEY_DOWNARROW,
	KEYP_3 = KEY_PGDN,
	KEYP_4 = KEY_LEFTARROW,
	KEYP_5 = (0x80 + 0x4c),
	KEYP_6 = KEY_RIGHTARROW,
	KEYP_7 = KEY_HOME,
	KEYP_8 = KEY_UPARROW,
	KEYP_9 = KEY_PGUP,
	KEYP_DIVIDE = '/',
	KEYP_PLUS = '+',
	KEYP_MINUS = '-',
	KEYP_MULTIPLY = '*',
	KEYP_PERIOD = 0,
	KEYP_EQUALS = KEY_EQUALS,
	KEYP_ENTER = KEY_ENTER,
	KEY_A = 'a',
	KEY_B = 'b',
	KEY_C = 'c',
	KEY_D = 'd',
	KEY_E = 'e',
	KEY_F = 'f',
	KEY_G = 'g',
	KEY_H = 'h',
	KEY_I = 'i',
	KEY_J = 'j',
	KEY_K = 'k',
	KEY_L = 'l',
	KEY_M = 'm',
	KEY_N = 'n',
	KEY_O = 'o',
	KEY_P = 'p',
	KEY_Q = 'q',
	KEY_R = 'r',
	KEY_S = 's',
	KEY_T = 't',
	KEY_U = 'u',
	KEY_V = 'v',
	KEY_W = 'w',
	KEY_X = 'x',
	KEY_Y = 'y',
	KEY_Z = 'z'
};
*/
